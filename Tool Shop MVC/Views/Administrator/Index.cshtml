@using ToolShopDomainCore.Domain.Fileters

@model Filters<ToolShopDomainCore.Domain.Entity.OperationRaport>

@{
    ViewData["Title"] = "Administrator";
    string idIcon = ViewBag.SortBy == "Id" && ViewBag.SortDirection == "ascending" ? "▲" : "▼";
    string operationIcon = ViewBag.SortBy == "Operation" && ViewBag.SortDirection == "ascending" ? "▲" : "▼";
    string userNameIcon = ViewBag.SortBy == "UserName" && ViewBag.SortDirection == "ascending" ? "▲" : "▼";
    string dateIcon = ViewBag.SortBy == "DateOfRealising" && ViewBag.SortDirection == "ascending" ? "▲" : "▼";
}

<div style="display:flex; justify-content:space-between;">
    <h1>Operation History</h1>
    <div class="col-sm-5" style="display:flex; padding-left:15%;">
        <h6>Amount elements: </h6>
        <form asp-controller="Administrator" asp-action="Index" method="get">
            <select id="perPage" name="perPage" class="form-control" onchange="this.form.submit()">
                @foreach (Perpage value in Enum.GetValues(typeof(Perpage)))
                {
                    if (Model.perPage == (int)value)
                    {
                        <option style="text-align:center;" value="@Convert.ToInt32(value)" selected>@Convert.ToInt32(value)</option>
                    }
                    else
                    {
                        <option style="text-align:center;" value="@Convert.ToInt32(value)">@Convert.ToInt32(value)</option>
                    }
                }
            </select>
        </form>
    </div>
</div>

<table class="table" style="text-align:center;">
    <thead>
        <tr>
            <th>
                <a style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = Model.CurrentPage, perPage = Model.perPage, SortBy = "Id", SortDirection = ViewBag.SortBy == "Id" && ViewBag.SortDirection == "ascending" ? "descending" : "ascending" })">@idIcon</a> @Html.DisplayNameFor(model => model.entity!.Value.First().Id)
            </th>
            <th>
                <a style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = Model.CurrentPage, perPage = Model.perPage, SortBy = "Operation", SortDirection = ViewBag.SortBy == "Operation" && ViewBag.SortDirection == "ascending" ? "descending" : "ascending" })">@operationIcon</a> @Html.DisplayNameFor(model => model.entity!.Value.First().Operation)
            </th>
            <th>
                <a style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = Model.CurrentPage, perPage = Model.perPage, SortBy = "UserName", SortDirection = ViewBag.SortBy == "UserName" && ViewBag.SortDirection == "ascending" ? "descending" : "ascending" })">@userNameIcon</a> @Html.DisplayNameFor(model => model.entity!.Value.First().UserName)
            </th>
            <th>
                <a style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = Model.CurrentPage, perPage = Model.perPage, SortBy = "DateOfRealising", SortDirection = ViewBag.SortBy == "DateOfRealising" && ViewBag.SortDirection == "ascending" ? "descending" : "ascending" })">@dateIcon</a> @Html.DisplayNameFor(model => model.entity!.Value.First().DateOfRealising)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.entity!.Value)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Id)</td>
                <td>@Html.DisplayFor(modelItem => item.Operation)</td>
                <td>@Html.DisplayFor(modelItem => item.UserName)</td>
                <td>@Html.DisplayFor(modelItem => item.DateOfRealising)</td>
            </tr>
        }
    </tbody>
</table>

<div class="container">
    @if (Model != null && Model.TotalPages > 0)
    {
        <ul class="pagination justify-content-center">
            @if (Model.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = 1, perPage = Model.perPage, SortBy = ViewBag.SortBy, SortDirection = ViewBag.SortDirection })">First</a>
                </li>
                <li>
                    <a class="page-link" style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = Model.CurrentPage - 1, perPage = Model.perPage, SortBy = ViewBag.SortBy, SortDirection = ViewBag.SortDirection })">Previous</a>
                </li>
            }
            @for (var pge = Model.StartPage; pge <= Model.LastPage; pge++)
            {
                <li class="page-item @(pge == Model.CurrentPage ? "active":"")">
                    <a class="page-link" style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = pge, perPage = Model.perPage, SortBy = ViewBag.SortBy, SortDirection = ViewBag.SortDirection })">@pge</a>
                </li>
            }
            @if (Model.CurrentPage < Model.LastPage)
            {
                <li class="page-item">
                    <a class="page-link" style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = Model.CurrentPage + 1, perPage = Model.perPage, SortBy = ViewBag.SortBy, SortDirection = ViewBag.SortDirection })">Next</a>
                </li>
                <li class="page-item">
                    <a class="page-link" style="color:black;text-decoration:none" href="@Url.Action("Index", new { CurrentPage = Model.LastPage, perPage = Model.perPage, SortBy = ViewBag.SortBy, SortDirection = ViewBag.SortDirection })">Last</a>
                </li>
            }
        </ul>
    }
</div>
